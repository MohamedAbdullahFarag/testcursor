using Dapper;
using Ikhtibar.Shared.Entities;
using Ikhtibar.Shared.Models;
using Ikhtibar.Core.Repositories.Interfaces;
using Ikhtibar.Infrastructure.Data;
using Ikhtibar.Shared.Enums;
using Ikhtibar.Shared.DTOs;

namespace Ikhtibar.Infrastructure.Repositories;

/// <summary>
/// Notification template repository implementation using Dapper
/// Provides template-specific data access operations following established patterns
/// </summary>
public class NotificationTemplateRepository : BaseRepository<NotificationTemplate>, INotificationTemplateRepository
{
    /// <summary>
    /// Initializes a new instance of the NotificationTemplateRepository
    /// </summary>
    /// <param name="connectionFactory">Factory for creating database connections</param>
    public NotificationTemplateRepository(IDbConnectionFactory connectionFactory) : base(connectionFactory)
    {
    }

    /// <summary>
    /// Gets a template by notification type and language
    /// </summary>
    /// <param name="notificationType">Type of notification</param>
    /// <param name="language">Language code (e.g., "en", "ar")</param>
    /// <returns>Template if found</returns>
    public async Task<NotificationTemplate?> GetByTypeAndLanguageAsync(NotificationType notificationType, string language)
    {
        const string sql = @"
            SELECT * 
            FROM NotificationTemplates 
            WHERE NotificationType = @NotificationType 
                AND Language = @Language 
                AND IsActive = 1 
                AND IsDeleted = 0
            ORDER BY CreatedAt DESC
            LIMIT 1";

        using var connection = _connectionFactory.CreateConnection();
        return await connection.QueryFirstOrDefaultAsync<NotificationTemplate>(sql, new 
        { 
            NotificationType = notificationType,
            Language = language
        });
    }

    /// <summary>
    /// Gets all templates for a specific notification type across all languages
    /// </summary>
    /// <param name="notificationType">Type of notification</param>
    /// <returns>List of templates for the notification type</returns>
    public async Task<IEnumerable<NotificationTemplate>> GetByNotificationTypeAsync(NotificationType notificationType)
    {
        const string sql = @"
            SELECT * 
            FROM NotificationTemplates 
            WHERE NotificationType = @NotificationType AND IsDeleted = 0
            ORDER BY Language, CreatedAt DESC";

        using var connection = _connectionFactory.CreateConnection();
        return await connection.QueryAsync<NotificationTemplate>(sql, new { NotificationType = notificationType });
    }

    /// <summary>
    /// Gets templates with pagination and filtering
    /// </summary>
    public async Task<(IEnumerable<NotificationTemplate> Templates, int TotalCount)> GetTemplatesAsync(
        int page = 1,
        int pageSize = 20,
        string? language = null,
        NotificationType? notificationType = null,
        bool activeOnly = true)
    {
        var offset = (page - 1) * pageSize;
        var whereConditions = "IsDeleted = 0";
        var parameters = new Dictionary<string, object> { { "Offset", offset }, { "PageSize", pageSize } };

        if (!string.IsNullOrEmpty(language))
        {
            whereConditions += " AND Language = @Language";
            parameters["Language"] = language;
        }

        if (notificationType.HasValue)
        {
            whereConditions += " AND NotificationType = @NotificationType";
            parameters["NotificationType"] = notificationType.Value;
        }

        if (activeOnly)
        {
            whereConditions += " AND IsActive = 1";
        }

        const string countSql = @"
            SELECT COUNT(1) 
            FROM NotificationTemplates 
            WHERE {0}";

        const string dataSql = @"
            SELECT * 
            FROM NotificationTemplates 
            WHERE {0}
            ORDER BY NotificationType, Language, CreatedAt DESC 
            OFFSET @offset ROWS FETCH NEXT @pageSize ROWS ONLY";

        using var connection = _connectionFactory.CreateConnection();

        // Get total count
        var totalCount = await connection.QuerySingleAsync<int>(
            string.Format(countSql, whereConditions),
            parameters);

        // Get data
        var templates = await connection.QueryAsync<NotificationTemplate>(
            string.Format(dataSql, whereConditions),
            parameters);

        return (templates, totalCount);
    }

    /// <summary>
    /// Updates the active status of a template
    /// </summary>
    /// <param name="templateId">Template ID</param>
    /// <param name="isActive">New active status</param>
    /// <returns>True if successfully updated</returns>
    public async Task<bool> UpdateActiveStatusAsync(Guid templateId, bool isActive)
    {
        const string sql = @"
            UPDATE NotificationTemplates 
            SET IsActive = @IsActive, ModifiedAt = @ModifiedAt
            WHERE Id = @TemplateId AND IsDeleted = 0";

        using var connection = _connectionFactory.CreateConnection();
        var affectedRows = await connection.ExecuteAsync(sql, new 
        { 
            TemplateId = templateId,
            IsActive = isActive ? 1 : 0,
            ModifiedAt = DateTime.UtcNow
        });

        return affectedRows > 0;
    }

    /// <summary>
    /// Gets all available languages that have templates
    /// </summary>
    /// <returns>List of language codes</returns>
    public async Task<IEnumerable<string>> GetAvailableLanguagesAsync()
    {
        const string sql = @"
            SELECT DISTINCT Language 
            FROM NotificationTemplates 
            WHERE IsActive = 1 AND IsDeleted = 0
            ORDER BY Language";

        using var connection = _connectionFactory.CreateConnection();
        return await connection.QueryAsync<string>(sql);
    }

    /// <summary>
    /// Searches templates by content (subject, message, etc.)
    /// </summary>
    /// <param name="searchTerm">Search term to look for in template content</param>
    /// <param name="language">Optional language filter</param>
    /// <param name="limit">Maximum number of results to return</param>
    /// <returns>List of templates matching the search criteria</returns>
    public async Task<IEnumerable<NotificationTemplate>> SearchTemplatesAsync(string searchTerm, string? language = null, int limit = 50)
    {
        var whereConditions = @"
            IsDeleted = 0 
            AND (Subject LIKE @SearchTerm 
                OR Message LIKE @SearchTerm 
                OR EmailHtml LIKE @SearchTerm 
                OR SmsContent LIKE @SearchTerm 
                OR PushTitle LIKE @SearchTerm 
                OR PushBody LIKE @SearchTerm)";

        var parameters = new Dictionary<string, object> 
        { 
            { "SearchTerm", $"%{searchTerm}%" },
            { "Limit", limit }
        };

        if (!string.IsNullOrEmpty(language))
        {
            whereConditions += " AND Language = @Language";
            parameters["Language"] = language;
        }

        var sql = $@"
            SELECT * 
            FROM NotificationTemplates 
            WHERE {whereConditions}
            ORDER BY 
                CASE 
                    WHEN Subject LIKE @SearchTerm THEN 1
                    WHEN Message LIKE @SearchTerm THEN 2
                    ELSE 3
                END,
                CreatedAt DESC
            LIMIT @Limit";

        using var connection = _connectionFactory.CreateConnection();
        return await connection.QueryAsync<NotificationTemplate>(sql, parameters);
    }

    /// <summary>
    /// Creates multiple templates in a single transaction
    /// </summary>
    /// <param name="templates">List of templates to create</param>
    /// <returns>Number of templates created</returns>
    public async Task<int> BulkCreateAsync(IEnumerable<NotificationTemplate> templates)
    {
        const string sql = @"
            INSERT INTO NotificationTemplates (
                Id, NotificationType, Language, Subject, Message, 
                EmailHtml, SmsContent, PushTitle, PushBody, 
                Variables, IsActive, CreatedAt, ModifiedAt
            ) VALUES (
                @Id, @NotificationType, @Language, @Subject, @Message,
                @EmailHtml, @SmsContent, @PushTitle, @PushBody,
                @Variables, @IsActive, @CreatedAt, @ModifiedAt
            )";

        using var connection = _connectionFactory.CreateConnection();
        using var transaction = connection.BeginTransaction();

        try
        {
            var now = DateTime.UtcNow;
            var templatesWithDefaults = templates.Select(t =>
            {
                t.Id = t.Id == Guid.Empty ? Guid.NewGuid() : t.Id;
                t.CreatedAt = now;
                t.ModifiedAt = now;
                t.IsDeleted = false;
                return t;
            });

            var affectedRows = await connection.ExecuteAsync(sql, templatesWithDefaults, transaction);
            transaction.Commit();
            return affectedRows;
        }
        catch
        {
            transaction.Rollback();
            throw;
        }
    }

    /// <summary>
    /// Gets templates that need to be created for missing language/type combinations
    /// </summary>
    /// <param name="requiredLanguages">List of required language codes</param>
    /// <returns>List of missing template specifications</returns>
    public async Task<IEnumerable<(NotificationType Type, string Language)>> GetMissingTemplatesAsync(IEnumerable<string> requiredLanguages)
    {
        var allTypes = Enum.GetValues<NotificationType>();
        var allCombinations = new List<(NotificationType Type, string Language)>();

        foreach (var type in allTypes)
        {
            foreach (var language in requiredLanguages)
            {
                allCombinations.Add((type, language));
            }
        }

        const string existingSql = @"
            SELECT NotificationType, Language 
            FROM NotificationTemplates 
            WHERE IsDeleted = 0";

        using var connection = _connectionFactory.CreateConnection();
        var existing = await connection.QueryAsync<(NotificationType Type, string Language)>(existingSql);
        var existingSet = existing.ToHashSet();

        return allCombinations.Where(combo => !existingSet.Contains(combo));
    }

    /// <summary>
    /// Gets all active templates for a specific notification type
    /// </summary>
    /// <param name="notificationType">Type of notification</param>
    /// <returns>List of active templates for the type</returns>
    public async Task<IEnumerable<NotificationTemplate>> GetActiveByTypeAsync(NotificationType notificationType)
    {
        const string sql = @"
            SELECT * 
            FROM NotificationTemplates 
            WHERE NotificationType = @NotificationType 
                AND IsActive = 1 
                AND IsDeleted = 0
            ORDER BY Language, CreatedAt DESC";

        using var connection = _connectionFactory.CreateConnection();
        return await connection.QueryAsync<NotificationTemplate>(sql, new { NotificationType = notificationType });
    }

    /// <summary>
    /// Gets template by name and language
    /// </summary>
    /// <param name="name">Template name</param>
    /// <param name="language">Language code</param>
    /// <returns>Template if found, null otherwise</returns>
    public async Task<NotificationTemplate?> GetByNameAndLanguageAsync(string name, string language)
    {
        const string sql = @"
            SELECT * 
            FROM NotificationTemplates 
            WHERE Name = @Name 
                AND Language = @Language 
                AND IsDeleted = 0
            ORDER BY CreatedAt DESC
            LIMIT 1";

        using var connection = _connectionFactory.CreateConnection();
        return await connection.QueryFirstOrDefaultAsync<NotificationTemplate>(sql, new 
        { 
            Name = name,
            Language = language
        });
    }

    /// <summary>
    /// Gets all supported languages for templates
    /// </summary>
    /// <returns>List of language codes that have templates</returns>
    public async Task<IEnumerable<string>> GetSupportedLanguagesAsync()
    {
        const string sql = @"
            SELECT DISTINCT Language 
            FROM NotificationTemplates 
            WHERE IsActive = 1 AND IsDeleted = 0
            ORDER BY Language";

        using var connection = _connectionFactory.CreateConnection();
        return await connection.QueryAsync<string>(sql);
    }

    /// <summary>
    /// Activates or deactivates a template
    /// </summary>
    /// <param name="templateId">Template ID</param>
    /// <param name="isActive">New active status</param>
    /// <returns>True if successfully updated</returns>
    public async Task<bool> SetActiveStatusAsync(Guid templateId, bool isActive)
    {
        const string sql = @"
            UPDATE NotificationTemplates 
            SET IsActive = @IsActive, ModifiedAt = @ModifiedAt
            WHERE Id = @TemplateId AND IsDeleted = 0";

        using var connection = _connectionFactory.CreateConnection();
        var affectedRows = await connection.ExecuteAsync(sql, new 
        { 
            TemplateId = templateId,
            IsActive = isActive ? 1 : 0,
            ModifiedAt = DateTime.UtcNow
        });

        return affectedRows > 0;
    }

    /// <summary>
    /// Gets template usage statistics
    /// </summary>
    /// <param name="templateId">Template ID</param>
    /// <param name="fromDate">Start date for statistics</param>
    /// <param name="toDate">End date for statistics</param>
    /// <returns>Usage statistics for the template</returns>
    public async Task<TemplateUsageStats> GetUsageStatsAsync(Guid templateId, DateTime fromDate, DateTime toDate)
    {
        const string usageSql = @"
            SELECT COUNT(1) 
            FROM Notifications 
            WHERE TemplateId = @TemplateId 
                AND CreatedAt BETWEEN @FromDate AND @ToDate 
                AND IsDeleted = 0";

        const string lastUsedSql = @"
            SELECT MAX(CreatedAt) 
            FROM Notifications 
            WHERE TemplateId = @TemplateId 
                AND IsDeleted = 0";

        const string byStatusSql = @"
            SELECT Status, COUNT(1) as Count
            FROM Notifications 
            WHERE TemplateId = @TemplateId 
                AND CreatedAt BETWEEN @FromDate AND @ToDate 
                AND IsDeleted = 0
            GROUP BY Status";

        const string byChannelSql = @"
            SELECT JSON_EXTRACT(ChannelData, '$.channel') as Channel, COUNT(1) as Count
            FROM Notifications 
            WHERE TemplateId = @TemplateId 
                AND CreatedAt BETWEEN @FromDate AND @ToDate 
                AND IsDeleted = 0
            GROUP BY JSON_EXTRACT(ChannelData, '$.channel')";

        var parameters = new 
        { 
            TemplateId = templateId, 
            FromDate = fromDate, 
            ToDate = toDate
        };

        using var connection = _connectionFactory.CreateConnection();

        var totalUsage = await connection.QuerySingleAsync<int>(usageSql, parameters);
        var lastUsed = await connection.QuerySingleOrDefaultAsync<DateTime?>(lastUsedSql, parameters);
        var byStatus = await connection.QueryAsync<(NotificationStatus Status, int Count)>(byStatusSql, parameters);
        var byChannel = await connection.QueryAsync<(string Channel, int Count)>(byChannelSql, parameters);

        var stats = new TemplateUsageStats
        {
            TotalUsage = totalUsage,
            LastUsedAt = lastUsed
        };

        foreach (var (status, count) in byStatus)
        {
            // Note: TemplateUsageStats doesn't have UsageByStatus, only UsageByChannel
            // Converting status to string for channel-like usage tracking
            stats.UsageByChannel[status.ToString()] = count;
        }

        foreach (var (channel, count) in byChannel)
        {
            if (Enum.TryParse<NotificationChannel>(channel, out var channelEnum))
            {
                stats.UsageByChannel[channelEnum.ToString()] = count;
            }
        }

        return stats;
    }

    /// <summary>
    /// Checks if a template name exists for a specific language
    /// </summary>
    /// <param name="name">Template name</param>
    /// <param name="language">Language code</param>
    /// <param name="excludeId">Optional ID to exclude from check (for updates)</param>
    /// <returns>True if template name exists</returns>
    public async Task<bool> TemplateNameExistsAsync(string name, string language, Guid? excludeId = null)
    {
        var sql = @"
            SELECT COUNT(1) 
            FROM NotificationTemplates 
            WHERE Name = @Name 
                AND Language = @Language 
                AND IsDeleted = 0";

        var parameters = new Dictionary<string, object>
        {
            { "Name", name },
            { "Language", language }
        };

        if (excludeId.HasValue)
        {
            sql += " AND Id != @ExcludeId";
            parameters["ExcludeId"] = excludeId.Value;
        }

        using var connection = _connectionFactory.CreateConnection();
        var count = await connection.QuerySingleAsync<int>(sql, parameters);
        return count > 0;
    }
}
