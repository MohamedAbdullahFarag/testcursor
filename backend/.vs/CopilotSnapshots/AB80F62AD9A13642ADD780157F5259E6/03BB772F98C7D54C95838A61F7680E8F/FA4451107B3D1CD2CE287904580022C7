using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Moq;
using Moq.Protected;
using System;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Xunit;
using Ikhtibar.API.Models;
using Ikhtibar.Infrastructure.Services;
using Ikhtibar.Shared.Models;

namespace Ikhtibar.Tests.Auth;

/// <summary>
/// Tests for OidcService
/// </summary>
public class OidcServiceTests
{
    private readonly Mock<HttpMessageHandler> _mockHttpHandler;
    private readonly HttpClient _httpClient;
    private readonly OidcSettings _oidcSettings;
    private readonly Mock<ILogger<OidcService>> _mockLogger;
    private readonly OidcService _service;

    public OidcServiceTests()
    {
        _mockHttpHandler = new Mock<HttpMessageHandler>(MockBehavior.Strict);
        _httpClient = new HttpClient(_mockHttpHandler.Object);
        _oidcSettings = new OidcSettings
        {
            Authority = "https://oidc.example.com",
            ClientId = "test-client",
            ClientSecret = "test-secret",
            RedirectUri = "https://localhost:7001/callback",
            Scopes = new[] { "openid", "profile", "email" }
        };
        _mockLogger = new Mock<ILogger<OidcService>>();

        var mockOptions = new Mock<IOptions<OidcSettings>>();
        mockOptions.Setup(x => x.Value).Returns(_oidcSettings);

        _service = new OidcService(_httpClient, mockOptions.Object);
    }

    [Fact]
    public async Task ExchangeCodeAsync_WithValidCode_ReturnsTokenResponse()
    {
        // Arrange
        var tokenResponse = new OidcTokenResponse
        {
            AccessToken = "access-token",
            IdToken = "id-token",
            RefreshTokens = "refresh-token",
            TokenType = "Bearer",
            ExpiresIn = 3600
        };

        var jsonResponse = JsonSerializer.Serialize(tokenResponse);
        var expectedEndpoint = "https://oidc.example.com/protocol/openid-connect/token";

        _mockHttpHandler
            .Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.IsAny<HttpRequestMessage>(),
                ItExpr.IsAny<CancellationToken>()
            )
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent(jsonResponse, Encoding.UTF8, "application/json")
            })
            .Verifiable();

        // Act
        var result = await _service.ExchangeCodeAsync("valid-code", _oidcSettings.RedirectUri);

        // Assert
        Assert.NotNull(result);
        Assert.Equal("access-token", result.AccessToken);
        Assert.Equal("id-token", result.IdToken);
        Assert.Equal("refresh-token", result.RefreshTokens);
        Assert.Equal("Bearer", result.TokenType);
        Assert.Equal(3600, result.ExpiresIn);

        _mockHttpHandler
            .Protected()
            .Verify(
                "SendAsync",
                Times.Once(),
                ItExpr.Is<HttpRequestMessage>(req =>
                    req.Method == HttpMethod.Post &&
                    req.RequestUri.ToString() == expectedEndpoint
                ),
                ItExpr.IsAny<CancellationToken>()
            );
    }

    [Fact]
    public async Task GetUserInfoAsync_WithValidToken_ReturnsUserInfo()
    {
        // Arrange
        var userInfo = new OidcUserInfo
        {
            Sub = "user-123",
            Email = "user@example.com",
            Name = "Test User",
            GivenName = "Test",
            FamilyName = "User",
            EmailVerified = true
        };

        var jsonResponse = JsonSerializer.Serialize(userInfo);
        var expectedEndpoint = "https://oidc.example.com/protocol/openid-connect/userinfo";

        _mockHttpHandler
            .Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.IsAny<HttpRequestMessage>(),
                ItExpr.IsAny<CancellationToken>()
            )
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent(jsonResponse, Encoding.UTF8, "application/json")
            })
            .Verifiable();

        // Act
        var result = await _service.GetUserInfoAsync("valid-token");

        // Assert
        Assert.NotNull(result);
        Assert.Equal("user-123", result.Sub);
        Assert.Equal("user@example.com", result.Email);
        Assert.Equal("Test User", result.Name);
        Assert.Equal("Test", result.GivenName);
        Assert.Equal("User", result.FamilyName);
        Assert.True(result.EmailVerified);

        _mockHttpHandler
            .Protected()
            .Verify(
                "SendAsync",
                Times.Once(),
                ItExpr.Is<HttpRequestMessage>(req =>
                    req.Method == HttpMethod.Get &&
                    req.RequestUri.ToString() == expectedEndpoint &&
                    req.Headers.Authorization?.Scheme == "Bearer" &&
                    req.Headers.Authorization?.Parameter == "valid-token"
                ),
                ItExpr.IsAny<CancellationToken>()
            );
    }

    [Fact]
    public async Task ValidateTokenAsync_WithValidToken_ReturnsTrue()
    {
        // Arrange
        var introspectionResponse = new { active = true };
        var jsonResponse = JsonSerializer.Serialize(introspectionResponse);
        var expectedEndpoint = "https://oidc.example.com/protocol/openid-connect/token/introspect";

        _mockHttpHandler
            .Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.IsAny<HttpRequestMessage>(),
                ItExpr.IsAny<CancellationToken>()
            )
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent(jsonResponse, Encoding.UTF8, "application/json")
            })
            .Verifiable();

        // Act
        var result = await _service.ValidateTokenAsync("valid-token");

        // Assert
        Assert.True(result);
    }

    [Fact]
    public async Task ValidateTokenAsync_WithInvalidToken_ReturnsFalse()
    {
        // Arrange
        var introspectionResponse = new { active = false };
        var jsonResponse = JsonSerializer.Serialize(introspectionResponse);
        var expectedEndpoint = "https://oidc.example.com/protocol/openid-connect/token/introspect";

        _mockHttpHandler
            .Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.IsAny<HttpRequestMessage>(),
                ItExpr.IsAny<CancellationToken>()
            )
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent(jsonResponse, Encoding.UTF8, "application/json")
            })
            .Verifiable();

        // Act
        var result = await _service.ValidateTokenAsync("invalid-token");

        // Assert
        Assert.False(result);
    }
}
