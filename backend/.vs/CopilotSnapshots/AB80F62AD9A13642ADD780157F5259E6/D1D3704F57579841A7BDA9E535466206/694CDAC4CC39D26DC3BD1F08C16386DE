using Xunit;
using Microsoft.AspNetCore.Mvc; using Microsoft.Extensions.Logging; using Moq; using Ikhtibar.API.Controllers; using Ikhtibar.Core.Services.Interfaces;  namespace Ikhtibar.Tests.API.Controllers;  /// <summary> /// Tests for SampleController functionality /// </summary>  public class SampleControllerTests {     private Mock<IUserService> _mockUserService;     private Mock<ILogger<SampleController>> _mockLogger;     private SampleController _controller;           public void Setup()     {         _mockUserService = new Mock<IUserService>();         _mockLogger = new Mock<ILogger<SampleController>>();         _controller = new SampleController(_mockUserService.Object, _mockLogger.Object);     }      [Fact]     public void Constructor_WithValidDependencies_ShouldCreateInstance()     {         // Act & Assert         Assert.NotNull(_controller);         Assert.That(_controller, Is.InstanceOf<SampleController>());     }      [Fact]     public void Constructor_WithNullUserService_ShouldThrowArgumentNullException()     {         // Act & Assert         var ex = Assert.Throws<ArgumentNullException>(() =>              new SampleController(null!, _mockLogger.Object));         Assert.Equal("userService", ex.ParamName);     }      [Fact]     public void Constructor_WithNullLogger_ShouldThrowArgumentNullException()     {         // Act & Assert         var ex = Assert.Throws<ArgumentNullException>(() =>              new SampleController(_mockUserService.Object, null!));         Assert.Equal("logger", ex.ParamName);     }      [Fact]     public void Get_ShouldReturn200Ok()     {         // Act         var result = _controller.Get();          // Assert         Assert.That(result, Is.InstanceOf<OkObjectResult>());         var okResult = result as OkObjectResult;         Assert.Equal(200, okResult?.StatusCode);     }      [Fact]     public void Get_ShouldReturnSuccessResponse()     {         // Act         var result = _controller.Get();         var okResult = result as OkObjectResult;         var responseData = okResult?.Value;          // Assert         Assert.NotNull(responseData);                  var responseType = responseData?.GetType();         var successProperty = responseType?.GetProperty("success");         var messageProperty = responseType?.GetProperty("message");         var dataProperty = responseType?.GetProperty("data");         var timestampProperty = responseType?.GetProperty("timestamp");                  Assert.NotNull(successProperty);         Assert.NotNull(messageProperty);         Assert.NotNull(dataProperty);         Assert.NotNull(timestampProperty);     }      [Fact]     public void Get_ShouldReturnServiceInformation()     {         // Act         var result = _controller.Get();         var okResult = result as OkObjectResult;         var responseData = okResult?.Value;          // Assert         var dataProperty = responseData?.GetType().GetProperty("data");         var dataValue = dataProperty?.GetValue(responseData);                  Assert.NotNull(dataValue);                  var dataType = dataValue?.GetType();         var messageProperty = dataType?.GetProperty("Message");         var serviceTypeProperty = dataType?.GetProperty("ServiceType");         var controllerNameProperty = dataType?.GetProperty("ControllerName");         var baseControllerProperty = dataType?.GetProperty("BaseController");                  Assert.NotNull(messageProperty);         Assert.NotNull(serviceTypeProperty);         Assert.NotNull(controllerNameProperty);         Assert.NotNull(baseControllerProperty);     }      [Fact]     public void Get_ShouldLogInformation()     {         // Act         _controller.Get();          // Assert         _mockLogger.Verify(             x => x.Log(                 LogLevel.Information,                 It.IsAny<EventId>(),                 It.Is<It.IsAnyType>((v, t) => true),                 It.IsAny<Exception>(),                 It.IsAny<Func<It.IsAnyType, Exception?, string>>()),             Times.Once);     }      [Fact]     public void Post_WithValidRequest_ShouldReturn200Ok()     {         // Arrange         var request = new SampleRequest { Message = "Test message" };          // Act         var result = _controller.Post(request);          // Assert         Assert.That(result, Is.InstanceOf<OkObjectResult>());         var okResult = result as OkObjectResult;         Assert.Equal(200, okResult?.StatusCode);     }      [Fact]     public void Post_WithNullRequest_ShouldReturn400BadRequest()     {         // Act         var result = _controller.Post(null!);          // Assert         Assert.That(result, Is.InstanceOf<BadRequestObjectResult>());         var badRequestResult = result as BadRequestObjectResult;         Assert.Equal(400, badRequestResult?.StatusCode);     }      [Fact]     public void Post_WithEmptyMessage_ShouldReturn400BadRequest()     {         // Arrange         var request = new SampleRequest { Message = "" };          // Act         var result = _controller.Post(request);          // Assert         Assert.That(result, Is.InstanceOf<BadRequestObjectResult>());         var badRequestResult = result as BadRequestObjectResult;         Assert.Equal(400, badRequestResult?.StatusCode);     }      [Fact]     public void Post_WithWhitespaceMessage_ShouldReturn400BadRequest()     {         // Arrange         var request = new SampleRequest { Message = "   " };          // Act         var result = _controller.Post(request);          // Assert         Assert.That(result, Is.InstanceOf<BadRequestObjectResult>());         var badRequestResult = result as BadRequestObjectResult;         Assert.Equal(400, badRequestResult?.StatusCode);     }      [Fact]     public void Post_WithValidRequest_ShouldReturnProcessedData()     {         // Arrange         var request = new SampleRequest { Message = "Test message", AdditionalData = "Extra data" };          // Act         var result = _controller.Post(request);         var okResult = result as OkObjectResult;         var responseData = okResult?.Value;          // Assert         var dataProperty = responseData?.GetType().GetProperty("data");         var dataValue = dataProperty?.GetValue(responseData);                  Assert.NotNull(dataValue);                  var dataType = dataValue?.GetType();         var receivedMessageProperty = dataType?.GetProperty("ReceivedMessage");         var processedAtProperty = dataType?.GetProperty("ProcessedAt");         var messageLengthProperty = dataType?.GetProperty("MessageLength");         var isValidProperty = dataType?.GetProperty("IsValid");                  Assert.NotNull(receivedMessageProperty);         Assert.NotNull(processedAtProperty);         Assert.NotNull(messageLengthProperty);         Assert.NotNull(isValidProperty);                  var receivedMessage = receivedMessageProperty?.GetValue(dataValue);         var messageLength = messageLengthProperty?.GetValue(dataValue);         var isValid = isValidProperty?.GetValue(dataValue);                  Assert.Equal("Test message", receivedMessage);         Assert.Equal(12, messageLength);         Assert.Equal(true, isValid);     }      [Fact]     public void Post_ShouldLogInformation()     {         // Arrange         var request = new SampleRequest { Message = "Test message" };          // Act         _controller.Post(request);          // Assert         _mockLogger.Verify(             x => x.Log(                 LogLevel.Information,                 It.IsAny<EventId>(),                 It.Is<It.IsAnyType>((v, t) => true),                 It.IsAny<Exception>(),                 It.IsAny<Func<It.IsAnyType, Exception?, string>>()),             Times.Once);     }      [Fact]     public async Task GetUserInfo_WithValidUserId_ShouldReturn200Ok()     {         // Act         var result = await _controller.GetUserInfo(1);          // Assert         Assert.That(result, Is.InstanceOf<OkObjectResult>());         var okResult = result as OkObjectResult;         Assert.Equal(200, okResult?.StatusCode);     }      [Fact]     public async Task GetUserInfo_ShouldReturnUserInformation()     {         // Act         var result = await _controller.GetUserInfo(1);         var okResult = result as OkObjectResult;         var responseData = okResult?.Value;          // Assert         var dataProperty = responseData?.GetType().GetProperty("data");         var dataValue = dataProperty?.GetValue(responseData);                  Assert.NotNull(dataValue);                  var dataType = dataValue?.GetType();         var userIdProperty = dataType?.GetProperty("UserId");         var serviceAvailableProperty = dataType?.GetProperty("ServiceAvailable");         var serviceTypeProperty = dataType?.GetProperty("ServiceType");         var retrievedAtProperty = dataType?.GetProperty("RetrievedAt");                  Assert.NotNull(userIdProperty);         Assert.NotNull(serviceAvailableProperty);         Assert.NotNull(serviceTypeProperty);         Assert.NotNull(retrievedAtProperty);                  var userId = userIdProperty?.GetValue(dataValue);         var serviceAvailable = serviceAvailableProperty?.GetValue(dataValue);         var serviceType = serviceTypeProperty?.GetValue(dataValue);                  Assert.Equal(1, userId);         Assert.Equal(true, serviceAvailable);         Assert.Equal("Mock`1", serviceType);     }      [Fact]     public async Task GetUserInfo_ShouldLogInformation()     {         // Act         await _controller.GetUserInfo(1);          // Assert         _mockLogger.Verify(             x => x.Log(                 LogLevel.Information,                 It.IsAny<EventId>(),                 It.Is<It.IsAnyType>((v, t) => true),                 It.IsAny<Exception>(),                 It.IsAny<Func<It.IsAnyType, Exception?, string>>()),             Times.Once);     }      [Fact]     public void TestErrorHandling_WithShouldErrorFalse_ShouldReturn200Ok()     {         // Act         var result = _controller.TestErrorHandling(false);          // Assert         Assert.That(result, Is.InstanceOf<OkObjectResult>());         var okResult = result as OkObjectResult;         Assert.Equal(200, okResult?.StatusCode);     }      [Fact]     public void TestErrorHandling_WithShouldErrorTrue_ShouldReturn400BadRequest()     {         // Act         var result = _controller.TestErrorHandling(true);          // Assert         Assert.That(result, Is.InstanceOf<BadRequestObjectResult>());         var badRequestResult = result as BadRequestObjectResult;         Assert.Equal(400, badRequestResult?.StatusCode);     }      [Fact]     public void TestErrorHandling_WithShouldErrorFalse_ShouldReturnSuccessResponse()     {         // Act         var result = _controller.TestErrorHandling(false);         var okResult = result as OkObjectResult;         var responseData = okResult?.Value;          // Assert         var dataProperty = responseData?.GetType().GetProperty("data");         var dataValue = dataProperty?.GetValue(responseData);                  Assert.NotNull(dataValue);                  var dataType = dataValue?.GetType();         var messageProperty = dataType?.GetProperty("Message");         var timestampProperty = dataType?.GetProperty("Timestamp");         var errorSimulatedProperty = dataType?.GetProperty("ErrorSimulated");                  Assert.NotNull(messageProperty);         Assert.NotNull(timestampProperty);         Assert.NotNull(errorSimulatedProperty);                  var message = messageProperty?.GetValue(dataValue);         var errorSimulated = errorSimulatedProperty?.GetValue(dataValue);                  Assert.Equal("Error handling test completed successfully", message);         Assert.Equal(false, errorSimulated);     }      [Fact]     public void TestErrorHandling_WithShouldErrorTrue_ShouldReturnErrorResponse()     {         // Act         var result = _controller.TestErrorHandling(true);         var badRequestResult = result as BadRequestObjectResult;         var responseData = badRequestResult?.Value;          // Assert         var dataProperty = responseData?.GetType().GetProperty("data");         var dataValue = dataProperty?.GetValue(responseData);                  Assert.NotNull(dataValue);                  var dataType = dataValue?.GetType();         var messageProperty = dataType?.GetProperty("message");                  Assert.NotNull(messageProperty);                  var message = messageProperty?.GetValue(dataValue);         Assert.Equal("This is a simulated error for testing purposes", message);     }      [Fact]     public void TestErrorHandling_ShouldLogAppropriateLevel()     {         // Act - Test success case         _controller.TestErrorHandling(false);          // Assert - Should log information         _mockLogger.Verify(             x => x.Log(                 LogLevel.Information,                 It.IsAny<EventId>(),                 It.Is<It.IsAnyType>((v, t) => true),                 It.IsAny<Exception>(),                 It.IsAny<Func<It.IsAnyType, Exception?, string>>()),             Times.Once);          // Act - Test error case         _controller.TestErrorHandling(true);          // Assert - Should log warning         _mockLogger.Verify(             x => x.Log(                 LogLevel.Warning,                 It.IsAny<EventId>(),                 It.Is<It.IsAnyType>((v, t) => true),                 It.IsAny<Exception>(),                 It.IsAny<Func<It.IsAnyType, Exception?, string>>()),             Times.Once);     } }
