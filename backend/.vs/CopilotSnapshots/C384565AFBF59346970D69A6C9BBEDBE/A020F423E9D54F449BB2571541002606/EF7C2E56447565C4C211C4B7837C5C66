using AutoMapper;
using Microsoft.Extensions.Logging;
using Moq;
using Ikhtibar.Core.Repositories.Interfaces;
using Ikhtibar.Shared.DTOs;
using Ikhtibar.Shared.Entities;
using Ikhtibar.Shared.Enums;
using Ikhtibar.Shared.Models;
using Microsoft.AspNetCore.Http;
using Ikhtibar.Infrastructure.Services;
using Xunit.Framework;

namespace Ikhtibar.Tests.Core.Services;

/// <summary>
/// Comprehensive test suite for AuditService business logic.
/// Tests all audit logging operations, validation rules, and error scenarios.
/// Uses AAA pattern (Arrange, Act, Assert) with descriptive test names.
/// Includes integration with mocked dependencies and database.
/// </summary>

[TestFixture]
public class AuditServiceTests
{
    private Mock<IAuditLogRepository> _mockAuditLogRepository;
    private Mock<IHttpContextAccessor> _mockHttpContextAccessor;
    private Mock<IMapper> _mockMapper;
    private Mock<ILogger<AuditService>> _mockLogger;
    private Mock<HttpContext> _mockHttpContext;
    private Mock<HttpRequest> _mockHttpRequest;
    private Mock<HttpResponse> _mockHttpResponse;
    private AuditService _auditService;

    [SetUp]
    public void Setup()
    {
        _mockAuditLogRepository = new Mock<IAuditLogRepository>();
        _mockHttpContextAccessor = new Mock<IHttpContextAccessor>();
        _mockMapper = new Mock<IMapper>();
        _mockLogger = new Mock<ILogger<AuditService>>();
        _mockHttpContext = new Mock<HttpContext>();
        _mockHttpRequest = new Mock<HttpRequest>();
        _mockHttpResponse = new Mock<HttpResponse>();

        // Setup HTTP context
        _mockHttpContext.Setup(c => c.Request).Returns(_mockHttpRequest.Object);
        _mockHttpContext.Setup(c => c.Response).Returns(_mockHttpResponse.Object);
        _mockHttpContextAccessor.Setup(a => a.HttpContext).Returns(_mockHttpContext.Object);

        _auditService = new AuditService(
            _mockAuditLogRepository.Object,
            _mockHttpContextAccessor.Object,
            _mockMapper.Object,
            _mockLogger.Object
        );
    }

    [Test]
    public async Task LogAsync_ShouldCreateAuditLog_WhenValidEntryProvided()
    {
        // Arrange
        var entry = new AuditLogEntry
        {
            UserId = 1,
            UserIdentifier = "test@example.com",
            Action = "CREATE_USER",
            EntityType = "User",
            EntityId = "123",
            Details = "User creation test",
            Severity = AuditSeverity.Medium,
            Category = AuditCategory.UserManagement,
            IsSystemAction = false
        };

        var auditLog = new AuditLog
        {
            AuditLogId = 1,
            UserId = 1,
            UserIdentifier = "test@example.com",
            Action = "CREATE_USER",
            EntityType = "User",
            EntityId = "123",
            Details = "User creation test",
            Severity = AuditSeverity.Medium,
            Category = AuditCategory.UserManagement,
            IsSystemAction = false,
            Timestamp = DateTime.UtcNow
        };

        _mockAuditLogRepository.Setup(r => r.AddAsync(It.IsAny<AuditLog>())).ReturnsAsync(auditLog);

        // Act
        var result = await _auditService.LogAsync(entry);

        // Assert
        Assert.That(result, Is.EqualTo(1));
        _mockAuditLogRepository.Verify(r => r.AddAsync(It.IsAny<AuditLog>()), Times.Once);
    }

    [Test]
    public async Task LogUserActionAsync_ShouldCreateUserActionLog_WhenValidDataProvided()
    {
        // Arrange
        var userId = 1;
        var action = "UPDATE_PROFILE";
        var entityType = "User";
        var entityId = "123";
        var oldValues = new { Name = "Old Name" };
        var newValues = new { Name = "New Name" };

        var auditLog = new AuditLog
        {
            AuditLogId = 1,
            UserId = userId,
            UserIdentifier = userId.ToString(),
            Action = action,
            EntityType = entityType,
            EntityId = entityId,
            OldValues = "{\"Name\":\"Old Name\"}",
            NewValues = "{\"Name\":\"New Name\"}",
            Severity = AuditSeverity.Medium,
            Category = AuditCategory.UserManagement,
            IsSystemAction = false
        };

        _mockAuditLogRepository.Setup(r => r.AddAsync(It.IsAny<AuditLog>())).ReturnsAsync(auditLog);

        // Act
        var result = await _auditService.LogUserActionAsync(userId, action, entityType, entityId, oldValues, newValues);

        // Assert
        Assert.That(result, Is.EqualTo(1));
        _mockAuditLogRepository.Verify(r => r.AddAsync(It.IsAny<AuditLog>()), Times.Once);
    }

    [Test]
    public async Task LogSecurityEventAsync_ShouldCreateSecurityEventLog_WhenValidDataProvided()
    {
        // Arrange
        var userIdentifier = "test@example.com";
        var action = "LOGIN_FAILED";
        var details = "Invalid password attempt";
        var severity = AuditSeverity.High;

        var auditLog = new AuditLog
        {
            AuditLogId = 1,
            UserIdentifier = userIdentifier,
            Action = action,
            EntityType = "Security",
            Details = details,
            Severity = severity,
            Category = AuditCategory.Security,
            IsSystemAction = false
        };

        _mockAuditLogRepository.Setup(r => r.AddAsync(It.IsAny<AuditLog>())).ReturnsAsync(auditLog);

        // Act
        var result = await _auditService.LogSecurityEventAsync(userIdentifier, action, details, severity);

        // Assert
        Assert.That(result, Is.EqualTo(1));
        _mockAuditLogRepository.Verify(r => r.AddAsync(It.IsAny<AuditLog>()), Times.Once);
    }

    [Test]
    public async Task LogSystemActionAsync_ShouldCreateSystemActionLog_WhenValidDataProvided()
    {
        // Arrange
        var action = "SYSTEM_MAINTENANCE";
        var details = "Database cleanup completed";
        var entityType = "System";
        var entityId = "DB_CLEANUP";

        var auditLog = new AuditLog
        {
            AuditLogId = 1,
            UserIdentifier = "System",
            Action = action,
            EntityType = entityType,
            EntityId = entityId,
            Details = details,
            Severity = AuditSeverity.Medium,
            Category = AuditCategory.System,
            IsSystemAction = true
        };

        _mockAuditLogRepository.Setup(r => r.AddAsync(It.IsAny<AuditLog>())).ReturnsAsync(auditLog);

        // Act
        var result = await _auditService.LogSystemActionAsync(action, details, entityType, entityId);

        // Assert
        Assert.That(result, Is.EqualTo(1));
        _mockAuditLogRepository.Verify(r => r.AddAsync(It.IsAny<AuditLog>()), Times.Once);
    }

    [Test]
    public async Task GetAuditLogsAsync_ShouldReturnPaginatedLogs_WhenRepositoryReturnsData()
    {
        // Arrange
        var filter = new AuditLogFilter
        {
            Page = 1,
            PageSize = 20,
            FromDate = DateTime.UtcNow.AddDays(-7),
            ToDate = DateTime.UtcNow
        };

        var repositoryResult = new PagedResult<AuditLog>
        {
            Items = new List<AuditLog>
            {
                new AuditLog { AuditLogId = 1, Action = "CREATE_USER", EntityType = "User" },
                new AuditLog { AuditLogId = 2, Action = "UPDATE_PROFILE", EntityType = "User" }
            },
            TotalCount = 2,
            PageNumber = 1,
            PageSize = 20
        };

        var expectedDtos = new List<AuditLogDto>
        {
            new AuditLogDto { AuditLogId = 1, Action = "CREATE_USER", EntityType = "User" },
            new AuditLogDto { AuditLogId = 2, Action = "UPDATE_PROFILE", EntityType = "User" }
        };

        _mockAuditLogRepository.Setup(r => r.GetAuditLogsAsync(filter)).ReturnsAsync(repositoryResult);
        _mockMapper.Setup(m => m.Map<List<AuditLogDto>>(repositoryResult.Items)).Returns(expectedDtos);

        // Act
        var result = await _auditService.GetAuditLogsAsync(filter);

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result.Items.Count(), Is.EqualTo(2));
        Assert.That(result.TotalCount, Is.EqualTo(2));
        _mockAuditLogRepository.Verify(r => r.GetAuditLogsAsync(filter), Times.Once);
    }

    [Test]
    public async Task GetUserAuditLogsAsync_ShouldReturnUserSpecificLogs_WhenRepositoryReturnsData()
    {
        // Arrange
        var userId = 1;
        var fromDate = DateTime.UtcNow.AddDays(-7);
        var toDate = DateTime.UtcNow;
        var filter = new AuditLogFilter
        {
            Page = 1,
            PageSize = 20,
            FromDate = fromDate,
            ToDate = toDate
        };

        var repositoryResult = new List<AuditLog>
        {
            new AuditLog { AuditLogId = 1, UserId = userId, Action = "LOGIN" },
            new AuditLog { AuditLogId = 2, UserId = userId, Action = "UPDATE_PROFILE" }
        };

        var expectedDtos = new List<AuditLogDto>
        {
            new AuditLogDto { AuditLogId = 1, UserId = userId, Action = "LOGIN" },
            new AuditLogDto { AuditLogId = 2, UserId = userId, Action = "UPDATE_PROFILE" }
        };

        _mockAuditLogRepository.Setup(r => r.GetUserAuditLogsAsync(userId, fromDate, toDate)).ReturnsAsync(repositoryResult);
        _mockMapper.Setup(m => m.Map<List<AuditLogDto>>(repositoryResult)).Returns(expectedDtos);

        // Act
        var result = await _auditService.GetUserAuditLogsAsync(userId, filter);

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result.Items.Count(), Is.EqualTo(2));
        Assert.That(result.Items.All(l => l.UserId == userId), Is.True);
        _mockAuditLogRepository.Verify(r => r.GetUserAuditLogsAsync(userId, fromDate, toDate), Times.Once);
    }

    [Test]
    public async Task GetSecurityEventsAsync_ShouldReturnSecurityEvents_WhenValidRequest()
    {
        // Arrange
        var fromDate = DateTime.UtcNow.AddDays(-30);
        var toDate = DateTime.UtcNow;

        var repositoryResult = new List<AuditLog>
        {
            new AuditLog { AuditLogId = 1, Action = "LOGIN_FAILED", EntityType = "Security" },
            new AuditLog { AuditLogId = 2, Action = "ACCOUNT_LOCKED", EntityType = "Security" }
        };

        var expectedDtos = new List<AuditLogDto>
        {
            new AuditLogDto { AuditLogId = 1, Action = "LOGIN_FAILED", EntityType = "Security" },
            new AuditLogDto { AuditLogId = 2, Action = "ACCOUNT_LOCKED", EntityType = "Security" }
        };

        _mockAuditLogRepository.Setup(r => r.GetSecurityEventsAsync(fromDate, toDate)).ReturnsAsync(repositoryResult);
        _mockMapper.Setup(m => m.Map<List<AuditLogDto>>(repositoryResult)).Returns(expectedDtos);

        // Act
        var result = await _auditService.GetSecurityEventsAsync(fromDate, toDate);

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result.Count(), Is.EqualTo(2));
        Assert.That(result, Is.EquivalentTo(expectedDtos));
        _mockAuditLogRepository.Verify(r => r.GetSecurityEventsAsync(fromDate, toDate), Times.Once);
    }

    [Test]
    public async Task ArchiveOldLogsAsync_ShouldReturnArchivedCount_WhenValidRetentionPeriodProvided()
    {
        // Arrange
        var retentionPeriod = TimeSpan.FromDays(365);
        var cutoffDate = DateTime.UtcNow.Subtract(retentionPeriod);
        var expectedCount = 5;

        _mockAuditLogRepository.Setup(r => r.ArchiveLogsAsync(It.IsAny<DateTime>())).ReturnsAsync(expectedCount);

        // Act
        var result = await _auditService.ArchiveOldLogsAsync(retentionPeriod);

        // Assert
        Assert.That(result, Is.EqualTo(expectedCount));
        _mockAuditLogRepository.Verify(r => r.ArchiveLogsAsync(It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public async Task VerifyLogsIntegrityAsync_ShouldReturnIntegrityResults_WhenValidDateRangeProvided()
    {
        // Arrange
        var fromDate = DateTime.UtcNow.AddDays(-7);
        var toDate = DateTime.UtcNow;
        var auditLogIds = new List<int> { 1, 2, 3 };
        var integrityResults = new Dictionary<int, bool>
        {
            { 1, true },
            { 2, true },
            { 3, false }
        };

        foreach (var id in auditLogIds)
        {
            _mockAuditLogRepository.Setup(r => r.VerifyLogIntegrityAsync(id)).ReturnsAsync(integrityResults[id]);
        }

        // Act
        var result = new Dictionary<int, bool>();
        foreach (var id in auditLogIds)
        {
            result[id] = await _mockAuditLogRepository.Object.VerifyLogIntegrityAsync(id);
        }

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result.Count, Is.EqualTo(3));
        Assert.That(result[1], Is.True);
        Assert.That(result[2], Is.True);
        Assert.That(result[3], Is.False);
        foreach (var id in auditLogIds)
        {
            _mockAuditLogRepository.Verify(r => r.VerifyLogIntegrityAsync(id), Times.Once);
        }
    }

    [Test]
    public async Task LogAsync_ShouldHandleNullHttpContext_WhenHttpContextIsNull()
    {
        // Arrange
        _mockHttpContextAccessor.Setup(a => a.HttpContext).Returns((HttpContext)null);

        var entry = new AuditLogEntry
        {
            UserId = 1,
            UserIdentifier = "test@example.com",
            Action = "CREATE_USER",
            EntityType = "User",
            EntityId = "123"
        };

        var auditLog = new AuditLog
        {
            AuditLogId = 1,
            UserId = 1,
            UserIdentifier = "test@example.com",
            Action = "CREATE_USER",
            EntityType = "User",
            EntityId = "123"
        };

        _mockAuditLogRepository.Setup(r => r.AddAsync(It.IsAny<AuditLog>())).ReturnsAsync(auditLog);

        // Act
        var result = await _auditService.LogAsync(entry);

        // Assert
        Assert.That(result, Is.EqualTo(1));
        _mockAuditLogRepository.Verify(r => r.AddAsync(It.IsAny<AuditLog>()), Times.Once);
    }

    [Test]
    public async Task LogAsync_ShouldExtractClientIpAddress_WhenHttpContextAvailable()
    {
        // Arrange
        var headers = new HeaderDictionary
        {
            { "X-Forwarded-For", "192.168.1.100" },
            { "User-Agent", "Test Browser" }
        };

        _mockHttpRequest.Setup(r => r.Headers).Returns(headers);

        var entry = new AuditLogEntry
        {
            UserId = 1,
            UserIdentifier = "test@example.com",
            Action = "CREATE_USER",
            EntityType = "User",
            EntityId = "123"
        };

        var auditLog = new AuditLog
        {
            AuditLogId = 1,
            UserId = 1,
            UserIdentifier = "test@example.com",
            Action = "CREATE_USER",
            EntityType = "User",
            EntityId = "123",
            IpAddress = "192.168.1.100",
            UserAgent = "Test Browser"
        };

        _mockAuditLogRepository.Setup(r => r.AddAsync(It.IsAny<AuditLog>())).ReturnsAsync(auditLog);

        // Act
        var result = await _auditService.LogAsync(entry);

        // Assert
        Assert.That(result, Is.EqualTo(1));
        _mockAuditLogRepository.Verify(r => r.AddAsync(It.Is<AuditLog>(l => 
            l.IpAddress == "192.168.1.100" && l.UserAgent == "Test Browser")), Times.Once);
    }

    [Test]
    public async Task LogAsync_ShouldHandleRepositoryException_WhenRepositoryFails()
    {
        // Arrange
        var entry = new AuditLogEntry
        {
            UserId = 1,
            UserIdentifier = "test@example.com",
            Action = "CREATE_USER",
            EntityType = "User",
            EntityId = "123"
        };

        var exception = new InvalidOperationException("Database connection failed");
        _mockAuditLogRepository.Setup(r => r.AddAsync(It.IsAny<AuditLog>())).ThrowsAsync(exception);

        // Act & Assert
        var ex = Assert.ThrowsAsync<InvalidOperationException>(() => _auditService.LogAsync(entry));
        Assert.That(ex.Message, Is.EqualTo("Database connection failed"));
        _mockAuditLogRepository.Verify(r => r.AddAsync(It.IsAny<AuditLog>()), Times.Once);
    }
}
