trigger:
  batch: false
  branches:
    include:
      - dev
      - master

variables:
  poolName:  linux
  enableCodeScanning: true
  dockerRegistry: 'tetco-prod-products-shrd-srvc/tetco-docker-containers'
  productName: $[lower('Unified-Portals')]
  imageName: $[lower(variables['Build.Repository.Name'])]
  imageVersion: $(Build.BuildNumber)
  ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}: 
    imageState: beta
    Version: $(GitVersion.MajorMinorPatch)
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}: 
    imageState: latest
    Version: $(GitVersion.MajorMinorPatch)

resources:
  repositories:
    - repository: templates
      type: git
      name: Platform/templates

stages:
- stage: 'Build'
  displayName: 'Build Stage'

  jobs:
  - job: 'Build'
    displayName: 'Build'

    pool:
      name: $(poolName)
      demands: java

    workspace:
      clean: all

    steps:
      - template: GitVersion.yml@templates
        parameters:
          useDotnet: true

      - task: NodeTool@0
        inputs:
          versionSpec: "18.x"
        displayName: "Install Node.js"

      - task: replacetokens@5
        displayName: "Update SonarQube Settings"
        inputs:
          targetFiles: "**/*sonar.ts"
          encoding: "auto"
          tokenPattern: "default"
          writeBOM: true
          actionOnMissing: "warn"
          keepToken: false
          actionOnNoFiles: "continue"
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true

      - task: replacetokens@5
        displayName: "Update Version Number"
        inputs:
          targetFiles: "**/*.env.production,**/*.env.staging,**/*.env.testing"
          encoding: "auto"
          tokenPattern: "default"
          writeBOM: true
          actionOnMissing: "warn"
          keepToken: false
          actionOnNoFiles: "continue"
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true

      - script: |
          curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm@6
        displayName: "Install Pipeline Dependencies"

      - script: |
          cd '$(System.DefaultWorkingDirectory)/Core'
          pnpm install
          
          cd '$(System.DefaultWorkingDirectory)/'
          pnpm install
          pnpm run build
        displayName: "Install and Build"

      - script: |
          cd '$(System.DefaultWorkingDirectory)/'
          pnpm run sonar
        displayName: "Run Code Analysis"
        condition: and(succeeded(), eq('${{ variables.enableCodeScanning }}', 'true'))

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/dist"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/Portal.zip"
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)/Portal.zip"
          ArtifactName: "drop"
          publishLocation: "Container"

      - task: Docker@2
        displayName: "Build Testing Docker Image"
        inputs:
          containerRegistry: 'Tetco-Registry'
          repository: '$(dockerRegistry)/$(productName)/$(imageName)'
          command: build
          Dockerfile: '**/Dockerfile'
          arguments: '--build-arg Environment=testing'
          tags: |
            $(productName)
            $(imageName)
            $(imageState)
            testing-$(imageVersion)            
        enabled: true

      - task: Docker@2
        displayName: "Push Testing Docker Image"
        inputs:
          containerRegistry: 'Tetco-Registry'
          repository: '$(dockerRegistry)/$(productName)/$(imageName)'
          command: push
          Dockerfile: '**/Dockerfile'
          tags: |
            $(productName)
            $(imageName)
            $(imageState)
            testing-$(imageVersion)            
        enabled: true

      - task: Docker@2
        displayName: "Build Staging Docker Image"
        inputs:
          containerRegistry: 'Tetco-Registry'
          repository: '$(dockerRegistry)/$(productName)/$(imageName)'
          command: build
          Dockerfile: '**/Dockerfile'
          arguments: '--build-arg Environment=staging'
          tags: |
            $(productName)
            $(imageName)
            $(imageState)
            staging-$(imageVersion)
        enabled: true

      - task: Docker@2
        displayName: "Push Staging Docker Image"
        inputs:
          containerRegistry: 'Tetco-Registry'
          repository: '$(dockerRegistry)/$(productName)/$(imageName)'
          command: push
          Dockerfile: '**/Dockerfile'
          tags: |
            $(productName)
            $(imageName)
            $(imageState)
            staging-$(imageVersion)
        enabled: true

- stage: 'Testing'
  displayName: 'Deploy to Kubernetes Testing Environment'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))

  variables:
    healthCheckUrl: 'https://up-stg.moe.gov.sa/'

  jobs: 
  - deployment: Testing
    displayName: Testing

    pool:
      name: $(poolName)
      #demands: java

    workspace:
      clean: all

    environment:
      name: Testing
      resourceType: VirtualMachine
      tags: Kubernetes

    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 10

    strategy:
      runOnce:
        preDeploy:
          steps:
          - script: echo initialize, cleanup, backup, install certs

        deploy:
          steps:
          - download: none

          - script: |
              echo "Starting deployment $(imageName) $(imageVersion) to Kubernetes."
              kubectl --kubeconfig "C:\kubectl\k8s-stg01.yaml" --insecure-skip-tls-verify=true --namespace=$(productName)-testing set image deployment $(imageName) $(imageName)=me-central2-docker.pkg.dev/$(dockerRegistry)/$(productName)/$(imageName):testing-$(imageVersion)

- stage: TestingVMs
  displayName: 'Deploy to Testing VMs Environment'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))

  variables:
    healthCheckUrl: 'http://edugate-stg.moe.gov.sa/'
    IISDeploymentType: 'IISWebsite' #'IISWebsite' | 'IISWebApplication' | 'IISVirtualDirectory' | 'IISApplicationPool'
    WebsiteName: 'Default Web Site'
    VirtualApplication: 'BackOffice'
    WebsitePhysicalPath: '%SystemDrive%\inetpub\wwwroot'

  jobs: 
  - deployment: TestingVMs
    displayName: Testing VMs

    pool:
      name: $(poolName)
      #demands: java

    workspace:
      clean: all

    environment:
      name: Testing
      resourceType: VirtualMachine
      tags: Web, Portal

    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 10

    strategy:
      rolling:
        maxParallel: 100%  #for percentages, mention as x%
        preDeploy:
          steps:
          - script: echo initialize, cleanup, backup, install certs

          - task: DeleteFiles@1
            displayName: 'Delete files from $(VirtualPathForApplication)\Assets'
            inputs:
              SourceFolder: '$(VirtualPathForApplication)\Assets'
              Contents: '**/*'

          - task: IISWebAppManagementOnMachineGroup@0
            displayName: 'IIS Web App Manage'
            inputs:
              IISDeploymentType: '$(IISDeploymentType)'
              #ActionIISWebsite: '$(ActionIISWebsite)'
              WebsiteName: '$(WebsiteName)'
              WebsitePhysicalPath: '$(WebsitePhysicalPath)'
              #AddBinding: '$(AddBinding)'
              #Bindings: '$(Bindings)'
              ParentWebsiteNameForVD: '$(WebsiteName)'
              VirtualPathForVD: '$(VirtualPathForApplication)'
              #ParentWebsiteNameForApplication: '$(WebsiteName)'
              VirtualPathForApplication: '$(VirtualPathForApplication)'
              #AppPoolName: '$(AppPoolName)'
            enabled: false

        deploy:
          steps:
          - task: IISWebAppDeploymentOnMachineGroup@0
            displayName: 'IIS Web App Deploy'
            inputs:
              WebSiteName: '$(WebsiteName)'
              VirtualApplication: '$(VirtualApplication)'
              Package: '$(Pipeline.Workspace)/drop/*.zip'
              TakeAppOfflineFlag: True
              XmlTransformation: false
              XmlVariableSubstitution: false

- stage: 'Staging'
  displayName: 'Deploy to Kubernetes Staging Environment'
  dependsOn: 'Testing'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))

  variables:
    healthCheckUrl: 'https://up-stg.moe.gov.sa/'

  jobs: 
  - deployment: Staging
    displayName: Staging

    pool:
      name: $(poolName)
      #demands: java

    workspace:
      clean: all

    environment:
      name: Staging
      resourceType: VirtualMachine
      tags: Kubernetes

    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 10

    strategy:
      runOnce:
        preDeploy:
          steps:
          - script: |
              echo initialize, cleanup, backup, install certs
              echo "Deploying $(dockerRegistry)/$(productName)/$(imageName):$(imageVersion)"

        deploy:
          steps:
          - download: none

          - script: |
              echo "Starting deployment $(imageName) $(imageVersion) to Kubernetes."
              kubectl --kubeconfig "C:\kubectl\k8s-stg01.yaml" --insecure-skip-tls-verify=true --namespace=$(productName) set image deployment $(imageName) $(imageName)=me-central2-docker.pkg.dev/$(dockerRegistry)/$(productName)/$(imageName):staging-$(imageVersion)